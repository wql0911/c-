//由于计算机内部表达方式的限制，浮点运算都有精度问题，为了得到高精度的计算结果，就需要自己设计实现方法。
(0,1)之间的任何浮点数都可以表达为两个正整数的商，为了表达这样两个数的商，可以将相除的结果以多个整数来表示，每个整数表示结果的一位。即商的第一位用一个整数来表示，第二位用另一个整数来表示，以此类推，就可以输出一个高精度的除法结果了。
如16/19的结果0.8421052631...就可以依次输出8、4、2、1、0、5、2、6、3、1...。
而除法的过程，则可以模仿人工列竖式做除法的方式，先将被除数乘以10，得到一位商以后，将余数乘以10作为下一轮计算的被除数。当某次余数为0时，则表明除尽。输入一个分数，计算出它的小数形式。无论是否可以除尽，输出最多小数点后200位。

#include<stdio.h>
int main()
{ 
	int a,b,i;
	scanf("%d/%d",&a,&b);//输入分数，以两个int实现
	while(i==0)
	{
		int e=1;
		int c=a/b;
		if(c==0)
			i=a*10;
		else
		    i=(a-b*c)*10;
		printf("%d",c);
		if(e==1)
		    printf(".");
		else
		{
			if(e>201)
      e++;
			break;
		}
	}	
	printf("\n");
	return 0;
}


#include<stdio.h>
int main()
{
	int a, b;
	scanf_s("%d/%d", &a, &b);
	int rem = -1;       //保存余数 
	int ret[200] = { 0 };     //保存结果 
	int i = 0;
	while (rem != 0 && i < 200)
	{
		ret[i] = a * 10 / b;
		rem = a * 10 % b;
		i++;
		a = rem;
	}
	printf("0.");
	for (int j = 0; j < i; j++) 
	{
		printf("%d", ret[j]);
	}
	printf("\n");
	return 0;
}
