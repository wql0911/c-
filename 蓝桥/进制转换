/*
十六进制每一位都对应二进制的四位数，而每三个二进制数字都对应一个八进制
注意字符串的引号
*/

#include<stdio.h>
#include<iostream>
#include<string>
#include<string.h>
#include<math.h>
using namespace std;
int main() {
    int n;
    string str_temp, str_in;
    scanf_s("%d", &n);
    for (int i = 0; i < n; i++)
    {
        //输入多组数据，给字符串赋空，同等效应str.clean()
        str_in = "";
        str_temp = "";

        cin >> str_in;
        int len = str_in.length();

        for (int j = 0; j < len; j++)
        {
            switch (str_in[j]) //把每一位的十六进制都转化为相应的二进制
            {
                case '0': str_temp += "0000"; break;
                case '1': str_temp += "0001"; break;
                case '2': str_temp += "0010"; break;
                case '3': str_temp += "0011"; break;
                case '4': str_temp += "0100"; break;
                case '5': str_temp += "0101"; break;
                case '6': str_temp += "0110"; break;
                case '7': str_temp += "0111"; break;
                case '8': str_temp += "1000"; break;
                case '9': str_temp += "1001"; break;
                case 'A': str_temp += "1010"; break;
                case 'B': str_temp += "1011"; break;
                case 'C': str_temp += "1100"; break;
                case 'D': str_temp += "1101"; break;
                case 'E': str_temp += "1110"; break;
                case 'F': str_temp += "1111"; break;
                default: break;
            }
        }
        int len_s = str_temp.length();
        int ans = 2;
        int sum = 0;
        int r = len * 4 % 3;
        //判断从哪个开始转化为八进制：看r的取值，如果余数为0对谁取余从谁开始，否则从余数开始
        if (r == 1) 
        {
            if (str_temp[0] == '1')
                printf("1");
        }
        else if (r == 2) 
        {
            if (str_temp[0] == '0' && str_temp[1] == '1')
                printf("1");
            else if (str_temp[0] == '1' && str_temp[1] == '0')
                printf("2");
            else if (str_temp[0] == '1' && str_temp[1] == '1')
                printf("3");
        }
        else//如果首位三个数字都为0，则从第四位开始
        {
            if (str_temp[0] == '0' && str_temp[1] == '0' && str_temp[2] == '0')
                r = 3;
        }
        //使用ans记录在三位中的哪个位上，每执行完一组，重置两个数字
        for (int i = r; i < len_s; i++)
        {
            if (str_temp[i] == '1')
                sum += pow(2, ans);
            ans--;
            if (ans == -1)
            {
                printf("%d", sum);
                ans = 2;
                sum = 0;
            }
        }
        printf("\n");
    }
    return 0;
}


解法一：
//十六进制转换为十进制
#include<iostream>
#include<stdio.h>
#include<string>
#include<string.h>
#include<math.h>
using namespace std;
int main()
{
	string str_in;
	cin >> str_in;
	int len = str_in.length();
	long long sum = 0;//十六进制不超过8位，十进制int类型所包含的数值过小
	int j = len - 1;
	for (int i = 0; i < len ; i++)
	{
		int r = 0;
		switch (str_in[i])
		{
			case '0': r = 0; break;
			case '1': r = 1; break;
			case '2': r = 2; break;
			case '3': r = 3; break;
			case '4': r = 4; break;
			case '5': r = 5; break;
			case '6': r = 6; break;
			case '7': r = 7; break;
			case '8': r = 8; break;
			case '9': r = 9; break;
			case 'A': r = 10; break;
			case 'B': r = 11; break;
			case 'C': r = 12; break;
      case 'D': r = 13; break;
      case 'E': r = 14; break;
			case 'F': r = 15; break;
			default: break;
		}
		sum = r * pow(16, j) + sum;
		j--;
	}
	printf("%lld", sum);
	return 0;
}


解法二
#include<stdio.h>
#include<string.h>
#include<math.h>
int main()
{
    char a[100];
    scanf("%s",a);
    int l=strlen(a);
    long long ans=0;
    for(int i=0; i<l; i++)
    {
        if(a[i]>='0'&&a[i]<='9')
            ans+=(a[i]-'0')*pow(16*1.0,l-1-i);
        else
            ans+=(a[i]-'A'+10)*pow(16*1.0,l-1-i);
    }
    printf("%lld\n",ans);
    return 0;
}




//十进制转十六进制（用十进制数字除16，取余数）
#include <stdio.h>

char getnum(int a)
{
	switch(a) //进制转换
	{
		case 0: return '0';break;
		case 1: return '1';break;
		case 2: return '2';break;
		case 3: return '3';break;
		case 4: return '4';break;
		case 5: return '5';break;
		case 6: return '6';break;
		case 7: return '7';break;
		case 8: return '8';break;
		case 9: return '9';break;
		case 10: return 'A';break;
		case 11: return 'B';break;
		case 12: return 'C';break;
		case 13: return 'D';break;
		case 14: return 'E';break;
		case 15: return 'F';break;
		
	}
} 

int main() {
	int a[128];  //存放除以16后得到的各个余数
	int n,i=0;
	scanf("%d",&n);
	
	if(n==0)
	{
		printf("0");
	}  //0不能作被除数，所以如果输入0,则直接输出0
	
	else
	{
		while(n)
		{
			a[i++]=n%16;  
			n/=16;
		}
		
		for(i-=1;i>=0;i--) //i-=1，指向最后一位，倒序输出
		{
			putchar(getnum(a[i]));
		}  
	}
	return 0;
}
